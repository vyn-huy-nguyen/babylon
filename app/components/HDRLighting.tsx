import React, { useState, useEffect } from "react";

/**
 * Component HDR Lighting Environment - Qu·∫£n L√Ω M√¥i Tr∆∞·ªùng HDR
 */

interface HDRLightingProps {
  scene: any;
  environmentType: string;
  setEnvironmentType: (type: string) => void;
  environmentIntensity: number;
  setEnvironmentIntensity: (intensity: number) => void;
  hdrExposure: number;
  setHdrExposure: (exposure: number) => void;
  toneMappingEnabled: boolean;
  setToneMappingEnabled: (enabled: boolean) => void;
  toneMappingType: string;
  setToneMappingType: (type: string) => void;
  environmentReflections: boolean;
  setEnvironmentReflections: (enabled: boolean) => void;
  reflectionIntensity: number;
  setReflectionIntensity: (intensity: number) => void;
}

export default function HDRLighting({
  scene,
  environmentType,
  setEnvironmentType,
  environmentIntensity,
  setEnvironmentIntensity,
  hdrExposure,
  setHdrExposure,
  toneMappingEnabled,
  setToneMappingEnabled,
  toneMappingType,
  setToneMappingType,
  environmentReflections,
  setEnvironmentReflections,
  reflectionIntensity,
  setReflectionIntensity
}: HDRLightingProps) {
  // Effect c·∫≠p nh·∫≠t m√¥i tr∆∞·ªùng HDR
  useEffect(() => {
    const updateEnvironment = async () => {
      if (!scene) return;
      
      try {
        const { CubeTexture } = await import("@babylonjs/core");

        // Ki·ªÉm tra n·∫øu l√† m√¥i tr∆∞·ªùng t√πy ch·ªânh
        if (["gradient", "studio", "outdoor", "night", "office"].includes(environmentType)) {
          const customEnvironment = await createCustomEnvironment(scene, environmentType);
          if (customEnvironment) {
            scene.environmentTexture = customEnvironment;
            scene.environmentIntensity = environmentIntensity;
          }
          // M√¥i tr∆∞·ªùng t√πy ch·ªânh ƒë√£ c·∫≠p nh·∫≠t
        } else {
          // S·ª≠ d·ª•ng HDR maps t·ª´ Babylon
          let environmentUrl = "https://playground.babylonjs.com/textures/room.env";
          switch (environmentType) {
            case "room":
              environmentUrl = "https://playground.babylonjs.com/textures/room.env";
              break;
            default:
              environmentUrl = "https://playground.babylonjs.com/textures/room.env";
          }

          const environmentTexture = new CubeTexture(environmentUrl, scene);
          scene.environmentTexture = environmentTexture;
          scene.environmentIntensity = environmentIntensity;

          // M√¥i tr∆∞·ªùng HDR ƒë√£ c·∫≠p nh·∫≠t
        }
      } catch (error) {
        // Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t m√¥i tr∆∞·ªùng
      }
    };

    updateEnvironment();
  }, [environmentType, environmentIntensity, scene]);

  // Effect c·∫≠p nh·∫≠t HDR advanced settings
  useEffect(() => {
    const updateAdvanced = async () => {
      if (!scene) return;
      await updateHDRAdvanced(scene);
    };

    updateAdvanced();
  }, [hdrExposure, toneMappingEnabled, toneMappingType, scene]);

  // H√†m t·∫°o m√¥i tr∆∞·ªùng t√πy ch·ªânh
  const createCustomEnvironment = async (scene: any, type: string) => {
    try {
      const { CubeTexture, HemisphericLight, DirectionalLight, PointLight, Vector3, Color3 } = await import("@babylonjs/core");

      const size = 512;
      const canvas = document.createElement("canvas");
      canvas.width = size;
      canvas.height = size;
      const ctx = canvas.getContext("2d");

      if (!ctx) return null;

      switch (type) {
        case "gradient":
          // Gradient t·ª´ b·∫ßu tr·ªùi ƒë·∫øn m·∫∑t ƒë·∫•t
          const gradient = ctx.createLinearGradient(0, 0, 0, size);
          gradient.addColorStop(0, "#87CEEB"); // B·∫ßu tr·ªùi xanh
          gradient.addColorStop(0.5, "#E0F6FF"); // B·∫ßu tr·ªùi nh·∫°t
          gradient.addColorStop(1, "#8B4513"); // M·∫∑t ƒë·∫•t n√¢u
          ctx.fillStyle = gradient;
          ctx.fillRect(0, 0, size, size);
          break;

        case "studio":
          // Studio lighting v·ªõi gradient tr·∫Øng
          const studioGradient = ctx.createRadialGradient(size/2, size/2, 0, size/2, size/2, size/2);
          studioGradient.addColorStop(0, "#FFFFFF"); // Trung t√¢m s√°ng
          studioGradient.addColorStop(0.7, "#F0F0F0"); // Gi·ªØa
          studioGradient.addColorStop(1, "#E0E0E0"); // Vi·ªÅn
          ctx.fillStyle = studioGradient;
          ctx.fillRect(0, 0, size, size);
          break;

        case "outdoor":
          // Outdoor v·ªõi √°nh s√°ng m·∫∑t tr·ªùi
          const outdoorGradient = ctx.createLinearGradient(0, 0, 0, size);
          outdoorGradient.addColorStop(0, "#FFD700"); // M·∫∑t tr·ªùi v√†ng
          outdoorGradient.addColorStop(0.3, "#87CEEB"); // B·∫ßu tr·ªùi xanh
          outdoorGradient.addColorStop(0.7, "#98FB98"); // C√¢y xanh
          outdoorGradient.addColorStop(1, "#8B4513"); // M·∫∑t ƒë·∫•t
          ctx.fillStyle = outdoorGradient;
          ctx.fillRect(0, 0, size, size);
          break;

        case "night":
          // ƒê√™m v·ªõi trƒÉng v√† sao
          ctx.fillStyle = "#000033"; // B·∫ßu tr·ªùi ƒë√™m
          ctx.fillRect(0, 0, size, size);
          
          // V·∫Ω trƒÉng
          ctx.fillStyle = "#FFFFF0";
          ctx.beginPath();
          ctx.arc(size * 0.8, size * 0.2, 30, 0, 2 * Math.PI);
          ctx.fill();
          
          // V·∫Ω sao
          for (let i = 0; i < 50; i++) {
            const x = Math.random() * size;
            const y = Math.random() * size * 0.6;
            ctx.fillStyle = "#FFFFFF";
            ctx.fillRect(x, y, 2, 2);
          }
          break;

        case "office":
          // VƒÉn ph√≤ng v·ªõi √°nh s√°ng hu·ª≥nh quang
          ctx.fillStyle = "#F5F5F5"; // T∆∞·ªùng tr·∫Øng
          ctx.fillRect(0, 0, size, size);
          
          // V·∫Ω ƒë√®n hu·ª≥nh quang
          for (let i = 0; i < 3; i++) {
            const x = size * 0.2 + i * size * 0.3;
            const y = size * 0.1;
            ctx.fillStyle = "#FFFFE0";
            ctx.fillRect(x, y, 60, 20);
          }
          break;
      }

      const texture = new CubeTexture("", scene);
      texture.updateURL(canvas.toDataURL());
      return texture;
    } catch (error) {
      console.error("‚ùå Failed to create custom environment:", error);
      return null;
    }
  };

  // H√†m c·∫≠p nh·∫≠t HDR advanced settings
  const updateHDRAdvanced = async (scene: any) => {
    try {
      const { ImageProcessingConfiguration } = await import("@babylonjs/core");

      if (!scene.imageProcessingConfiguration) {
        scene.imageProcessingConfiguration = new ImageProcessingConfiguration();
      }

      // C·∫≠p nh·∫≠t exposure
      scene.imageProcessingConfiguration.exposure = hdrExposure;

      // C·∫≠p nh·∫≠t tone mapping
      if (toneMappingEnabled) {
        scene.imageProcessingConfiguration.toneMappingEnabled = true;
        scene.imageProcessingConfiguration.toneMappingType = 
          toneMappingType === "ACES" ? ImageProcessingConfiguration.TONEMAPPING_ACES : ImageProcessingConfiguration.TONEMAPPING_STANDARD;
      } else {
        scene.imageProcessingConfiguration.toneMappingEnabled = false;
      }

      // HDR advanced settings updated
    } catch (error) {
      console.error("‚ùå Failed to update HDR advanced settings:", error);
    }
  };

  return (
    <div className="mb-4 border-t border-gray-600 pt-4">
      <h4 className="text-md font-semibold mb-3">üåü M√¥i Tr∆∞·ªùng HDR</h4>

      {/* Environment Type Selector */}
      <div className="mb-4">
        <label className="block text-sm font-medium mb-2">Lo·∫°i M√¥i Tr∆∞·ªùng</label>
        <select
          value={environmentType}
          onChange={(e) => setEnvironmentType(e.target.value)}
          className="w-full p-2 bg-gray-700 rounded border border-gray-600 text-white"
        >
          <optgroup label="üåê B·∫£n ƒê·ªì HDR">
            <option value="room">üè† Ph√≤ng (Trong Nh√†)</option>
          </optgroup>
          <optgroup label="üé® M√¥i Tr∆∞·ªùng T√πy Ch·ªânh">
            <option value="gradient">üåà Gradient (B·∫ßu Tr·ªùi ƒë·∫øn M·∫∑t ƒê·∫•t)</option>
            <option value="studio">üé¨ Studio (√Ånh S√°ng Chuy√™n Nghi·ªáp)</option>
            <option value="outdoor">üå≥ Ngo√†i Tr·ªùi (√Ånh S√°ng T·ª± Nhi√™n)</option>
            <option value="night">üåô ƒê√™m (TrƒÉng & ƒê√®n ƒê∆∞·ªùng)</option>
            <option value="office">üè¢ VƒÉn Ph√≤ng (Hu·ª≥nh Quang & T·ª± Nhi√™n)</option>
          </optgroup>
        </select>
      </div>

      {/* Environment Intensity Control */}
      <div className="mb-4">
        <label className="block text-sm font-medium mb-2">
          C∆∞·ªùng ƒê·ªô M√¥i Tr∆∞·ªùng: {environmentIntensity.toFixed(2)}
        </label>
        <input
          type="range"
          min="0"
          max="2"
          step="0.1"
          value={environmentIntensity}
          onChange={(e) => setEnvironmentIntensity(parseFloat(e.target.value))}
          className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer"
        />
        <div className="flex justify-between text-xs text-gray-400 mt-1">
          <span>0 (T·ªëi)</span>
          <span>1 (B√¨nh Th∆∞·ªùng)</span>
          <span>2 (S√°ng)</span>
        </div>
      </div>

      {/* HDR Advanced Controls */}
      <div className="mb-4 border-t border-gray-600 pt-4">
        <h5 className="text-md font-semibold mb-3">üéõÔ∏è HDR N√¢ng Cao</h5>

        {/* HDR Exposure Control */}
        <div className="mb-4">
          <label className="block text-sm font-medium mb-2">
            ƒê·ªô Ph∆°i S√°ng HDR: {hdrExposure.toFixed(2)}
          </label>
          <input
            type="range"
            min="0"
            max="4"
            step="0.1"
            value={hdrExposure}
            onChange={(e) => setHdrExposure(parseFloat(e.target.value))}
            className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer"
          />
          <div className="flex justify-between text-xs text-gray-400 mt-1">
            <span>0 (T·ªëi)</span>
            <span>1 (B√¨nh Th∆∞·ªùng)</span>
            <span>4 (S√°ng)</span>
          </div>
        </div>

        {/* Tone Mapping Control */}
        <div className="mb-4">
          <label className="block text-sm font-medium mb-2">Tone Mapping</label>
          <div className="flex items-center mb-2">
            <input
              type="checkbox"
              checked={toneMappingEnabled}
              onChange={(e) => setToneMappingEnabled(e.target.checked)}
              className="mr-2"
            />
            <span className="text-sm">B·∫≠t Tone Mapping</span>
          </div>
          <select
            value={toneMappingType}
            onChange={(e) => setToneMappingType(e.target.value)}
            className="w-full p-2 bg-gray-700 rounded border border-gray-600 text-white"
            disabled={!toneMappingEnabled}
          >
            <option value="ACES">ACES (Ti√™u Chu·∫©n Phim)</option>
            <option value="Standard">Ti√™u Chu·∫©n</option>
          </select>
        </div>

        {/* Environment Reflections Control */}
        <div className="mb-4">
          <label className="block text-sm font-medium mb-2">Ph·∫£n X·∫° M√¥i Tr∆∞·ªùng</label>
          <div className="flex items-center mb-2">
            <input
              type="checkbox"
              checked={environmentReflections}
              onChange={(e) => setEnvironmentReflections(e.target.checked)}
              className="mr-2"
            />
            <span className="text-sm">B·∫≠t Ph·∫£n X·∫°</span>
          </div>
          <label className="block text-sm font-medium mb-2">
            C∆∞·ªùng ƒê·ªô Ph·∫£n X·∫°: {reflectionIntensity.toFixed(2)}
          </label>
          <input
            type="range"
            min="0"
            max="2"
            step="0.1"
            value={reflectionIntensity}
            onChange={(e) => setReflectionIntensity(parseFloat(e.target.value))}
            className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer"
            disabled={!environmentReflections}
          />
          <div className="flex justify-between text-xs text-gray-400 mt-1">
            <span>0 (Kh√¥ng)</span>
            <span>1 (B√¨nh Th∆∞·ªùng)</span>
            <span>2 (M·∫°nh)</span>
          </div>
        </div>
      </div>
    </div>
  );
}
