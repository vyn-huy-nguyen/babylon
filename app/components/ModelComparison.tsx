import React, { useState, useEffect } from "react";

/**
 * Component Model Comparison - So S√°nh M√¥ H√¨nh G·ªëc vs Th·ªùi Gian Th·ª±c
 */

interface ModelComparisonProps {
  scene: any;
  lightingMode: string;
  setLightingMode: (mode: string) => void;
}

export default function ModelComparison({
  scene,
  lightingMode,
  setLightingMode
}: ModelComparisonProps) {


  // Effect c·∫≠p nh·∫≠t ch·∫ø ƒë·ªô m√¥ h√¨nh
  useEffect(() => {
    const updateModel = async () => {
      if (!scene) return;
      await setupModelComparison(scene);
    };

    updateModel();
  }, [lightingMode, scene]);

  // H√†m thi·∫øt l·∫≠p so s√°nh m√¥ h√¨nh
  const setupModelComparison = async (scene: any) => {
    try {
      const { HemisphericLight, Vector3, Color3, StandardMaterial, Texture } = await import("@babylonjs/core");

      if (lightingMode === "original") {
        // ===== THI·∫æT L·∫¨P M√î H√åNH G·ªêC =====

        // T·∫Øt t·∫•t c·∫£ custom lighting
        scene.lights.forEach((light: any) => {
          light.dispose();
        });

        // T·∫Øt environment texture
        scene.environmentTexture = null;
        scene.environmentIntensity = 0;

        // T·∫Øt shadows
        scene.shadowGenerators.forEach((generator: any) => {
          generator.dispose();
        });

        // T·∫°o basic lighting cho model g·ªëc (ƒë·ªß s√°ng ƒë·ªÉ nh√¨n th·∫•y)
        const mainLight = new HemisphericLight(
          "mainLight",
          new Vector3(0, 1, 0),
          scene
        );
        mainLight.intensity = 0.8;
        mainLight.diffuse = new Color3(1, 1, 1);
        mainLight.groundColor = new Color3(0.3, 0.3, 0.3);

        // Fill light t·ª´ b√™n c·∫°nh
        const fillLight = new HemisphericLight(
          "fillLight",
          new Vector3(1, 0.5, 0.5),
          scene
        );
        fillLight.intensity = 0.3;
        fillLight.diffuse = new Color3(0.9, 0.9, 1);

        // Ch·∫ø ƒë·ªô m√¥ h√¨nh g·ªëc - ch·ªâ √°nh s√°ng c∆° b·∫£n
      } else {
        // ===== THI·∫æT L·∫¨P TƒÇNG C∆Ø·ªúNG TH·ªúI GIAN TH·ª∞C =====

        // Kh√¥i ph·ª•c √°nh s√°ng th·ªùi gian th·ª±c
        await setupRealisticShadows(scene);

        // Kh√¥i ph·ª•c m√¥i tr∆∞·ªùng HDR
        const { CubeTexture } = await import("@babylonjs/core");
        const environmentTexture = new CubeTexture(
          "https://playground.babylonjs.com/textures/room.env",
          scene
        );
        scene.environmentTexture = environmentTexture;
        scene.environmentIntensity = 0.5;

        // Ch·∫ø ƒë·ªô tƒÉng c∆∞·ªùng th·ªùi gian th·ª±c - thi·∫øt l·∫≠p √°nh s√°ng ƒë·∫ßy ƒë·ªß
      }
    } catch (error) {
      console.error("‚ùå Failed to setup model comparison:", error);
    }
  };

  // H√†m thi·∫øt l·∫≠p b√≥ng ƒë·ªï th·ª±c t·∫ø (ƒë∆°n gi·∫£n h√≥a)
  const setupRealisticShadows = async (scene: any) => {
    try {
      const { ShadowGenerator, DirectionalLight, Vector3, Color3 } = await import("@babylonjs/core");

      // T·∫°o directional light cho shadows
      const shadowLight = new DirectionalLight(
        "shadowLight",
        new Vector3(-1, -2, -1),
        scene
      );
      shadowLight.intensity = 0.3;
      shadowLight.diffuse = new Color3(1, 1, 1);

      // T·∫°o shadow generator
      const shadowGenerator = new ShadowGenerator(1024, shadowLight);
      shadowGenerator.useBlurExponentialShadowMap = true;
      shadowGenerator.blurKernel = 16;

      // √Åp d·ª•ng shadows cho t·∫•t c·∫£ meshes
      scene.meshes.forEach((mesh: any) => {
        if (mesh.name !== "__root__") {
          shadowGenerator.addShadowCaster(mesh, true);
          mesh.receiveShadows = true;
        }
      });

      // Realistic shadows setup completed
    } catch (error) {
      console.error("‚ùå Failed to setup realistic shadows:", error);
    }
  };



  return (
    <div className="mb-4 border-t border-gray-600 pt-4">
      <h4 className="text-md font-semibold mb-3">üé® So S√°nh M√¥ H√¨nh</h4>

      {/* Model Mode Selector */}
      <div className="mb-4">
        <label className="block text-sm font-medium mb-2">Ch·∫ø ƒê·ªô M√¥ H√¨nh</label>
        <select
          value={lightingMode}
          onChange={(e) => setLightingMode(e.target.value)}
          className="w-full p-2 bg-gray-700 rounded border border-gray-600 text-white"
        >
          <option value="original">M√¥ H√¨nh G·ªëc</option>
          <option value="realtime">TƒÉng C∆∞·ªùng Th·ªùi Gian Th·ª±c</option>
        </select>
      </div>

      {/* Comparison Info */}
      <div className="mb-4 p-3 bg-gray-800 rounded">
        <h5 className="text-sm font-medium mb-2">Chi Ti·∫øt So S√°nh:</h5>
        <div className="text-xs space-y-1">
          <div>
            <strong>G·ªëc:</strong> M√¥ h√¨nh g·ªëc v·ªõi √°nh s√°ng c∆° b·∫£n (ƒë·ªß s√°ng)
          </div>
          <div>
            <strong>Th·ªùi gian th·ª±c:</strong> √Ånh s√°ng HDR + ƒëi·ªÅu khi·ªÉn PBR + b√≥ng ƒë·ªï
          </div>
        </div>
      </div>

      {/* Performance Info */}
      <div className="mb-4 p-3 bg-gray-800 rounded">
        <h5 className="text-sm font-medium mb-2">Hi·ªáu Su·∫•t:</h5>
        <div className="text-xs space-y-1">
          <div>
            <strong>G·ªëc:</strong> ‚ö°‚ö°‚ö°‚ö°‚ö° (Nhanh)
          </div>
          <div>
            <strong>Th·ªùi gian th·ª±c:</strong> ‚ö°‚ö°‚ö° (Trung b√¨nh)
          </div>
        </div>
      </div>

      {/* Quality Info */}
      <div className="mb-4 p-3 bg-gray-800 rounded">
        <h5 className="text-sm font-medium mb-2">Ch·∫•t L∆∞·ª£ng:</h5>
        <div className="text-xs space-y-1">
          <div>
            <strong>G·ªëc:</strong> üü° Trung b√¨nh (√Ånh s√°ng c∆° b·∫£n, c√≥ th·ªÉ nh√¨n th·∫•y)
          </div>
          <div>
            <strong>Th·ªùi gian th·ª±c:</strong> üü¢ Cao (√Ånh s√°ng n√¢ng cao)
          </div>
        </div>
      </div>



      {/* Current Mode Display */}
      <div className="mb-4 p-3 bg-gray-800 rounded">
        <h5 className="text-sm font-medium mb-2">Ch·∫ø ƒê·ªô Hi·ªán T·∫°i:</h5>
        <div className="text-xs">
          <div className={`font-bold ${lightingMode === "original" ? "text-yellow-400" : "text-green-400"}`}>
            {lightingMode === "original" ? "üéØ M√¥ H√¨nh G·ªëc" : "‚ö° TƒÉng C∆∞·ªùng Th·ªùi Gian Th·ª±c"}
          </div>
          <div className="text-gray-400 mt-1">
            {lightingMode === "original" 
              ? "S·ª≠ d·ª•ng √°nh s√°ng c∆° b·∫£n ƒë·ªÉ hi·ªÉn th·ªã m√¥ h√¨nh g·ªëc"
              : "S·ª≠ d·ª•ng √°nh s√°ng HDR, PBR v√† b√≥ng ƒë·ªï n√¢ng cao"
            }
          </div>
        </div>
      </div>
    </div>
  );
}
